name: level
layout: false
class: middle, center
---
name: inverse
layout: true
class: middle, center, inverse
---
# A guide to Vim!
.hl[
## [torgeir/vim-workshop](//github.com/torgeir/vim-workshop)
]
---
# Agenda
## The best way to learn vim is to use vim.. a lot.
.left[
### - Interactive workshop
### - All tasks work in a terminal vim
### - Most tasks (not all) work with the vscode vim plugin
]
.left[
```
git clone git@github.com:torgeir/vim-workshop.git &&\
 cd vim-workshop &&\
 vim tasks
```
#### `:bd` closes current task buffer
]
???
- Til det blir muskelminne
- Tro det eller ei, det gj칮r det faktisk etter hvert.
---
# Why Vim?
## It might be for you, if you enjoy..
.right-col[
<img src="learning-curve.jpg" />
]
.left[
### - An omnipresent editor
### - The linux philosophy
### - A steep learning curve
### - Not using the mouse
### - _A LOT_ of keyboard shortcuts
### - Automating advanced text operations
### - Fascination of goofing around with old text editors
### - Understanding there are actual reasons for the madness that is Vim
]
???
- Ikke til 친 legge skjul p친, ikke for alle synes det er en 친lreit m친te 친 tenke p친
- T친lt tidens tann
- Vise frem, gjennom en del oppgaver, ting man kan gj칮re med en helt plain vim
- Pr칮ve 친 vise frem at det faktisk fins noe logikk i galskapen
- Usikker selv p친 om jeg ville begynt med plain vim idag n친r det finnes s친 mange
  gode alternativer, som feks vscode
- Fortsatt mye nyttig 친 dra p친 fra vim-plugins mtp. transformering av tekst
- Lite innhold her som ikke er keyboard shortcuts - s친 hold deg fast
---
template: level
# LEVEL 0
## "Oh'noes!" 游땸
---
# Quit
<style>
.task { position: absolute; top: 1rem; right: 1rem; }
</style>
.task[[Task 0.1](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-0.1.txt)]
.left[
## Hammer esc to escape everything you got going on..
## `<esc><esc><es..`
## Then
### `:q!` <u>q</u>uit buffer, without saving.
### `:qa!` <u>q</u>uit <u>a</u>ll buffers, discarding changes.
### `:wq!` <u>w</u>rite file and <u>q</u>uit.
]
---
# Now, open it again..
---
# Help
.task[[Task 0.2](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-0.2.txt)]
.left[
## An actually useful manual!
## `:h[elp] <subject>`
]
<br>
.left-col[
## Try these
### `:help :qa`
### `:hel :qa`
### `:he :qa`
### `:h :qa`
]
.right-col[
## Or this program for more practice after the workshop..
### `vimtutor`
]
---
template: level
# LEVEL 1
## "Look ma', I can Vim" 游놌
---
# Modal editor
## Different modes do different things!
.left[
## `normal`
### - Text operations. Moving text around. Jumping around.
## `insert`
### - Inserting text.
## `visual`
### - Highligting text. Operations on selected regions.
]
???
- Gj칮r en ting, gj칮r det godt.
- 칄n modus for navigering, 칠n for insertion, en for visual.
- Kan sp칮rre seg om det er godt eller ikke??
- Det er i alle fall s친nn det blir gjort.
- Normal mode - Befinner seg st칮rsteparten av titen. En modus for 친 operere p친 tekst flytte seg rundt.
- Risikerer rare blikk om du feks navigerer masse rundt med piltaster i insert mode
- For det b칮r man gj칮re i normal mode
- Ordentlige vimmere unbinder piltastene s친nn at de ikke virker for 친 f친 det i fingerene

---
# Move the cursor
## More than two of these in a row is cheating!
.task[[Task 1.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-1.0.txt)]
.left-col[
### `h` left
### `j` down
### `k` up
### `l` right
]
.right-col[
### `w` next <u>w</u>ord
### `b` <u>b</u>ack word
### `0` or `^` start of line
### `$` end of line
]
--
<div style="position: relative">
  <img
  src="https://hackaday.com/wp-content/uploads/2014/02/adm3a.jpg?resize=701,625"
  style="position: absolute; top: -130px; left: 0px; clip: rect(400px, 800px, 1200px, 0) "/>
</div>
.right[Source: Hackaday.com]
---
# Repeated command
.task[[Task 1.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-1.0.txt)]
## Cause pressing the same key over and over is tedious.
.left[
### `20j` twenty times down
### `3w` three times next word
]
???
:set relativenumber
---
# How do I type actual text??
.task[[Task 1.1](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-1.1.txt)]
## And not just mess stuff up.
.left-col[
### `i` <u>i</u>nsert mode before marker
### `a` insert mode <u>a</u>fter marker
### `<esc>` <u>esc</u>ape back to the safe haven that is normal mode!
]
.right-col[
### `I` insert mode at start of line
### `A` insert mode at end of line
### `o` open line below
### `O` open line above
]
???
- M친 kunne skrive tekst ogs친
- Stor bokstav gj칮r ofte en variasjon av den opprinnelige
- Eller det motsatte av de
---
# And save stuff??
.task[[Task 1.2](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-1.2.txt)]
## Write contents of the buffer to a file.
.left[
### `:w[rite] [file]` Write to the given file
### `:w [file]` The same
### `:w` Write to the current file
]
???
- M친 kunne lagre tekst ogs친
- Dette kan dere, :wq
---
template: level
# LEVEL 2
## "I can do this." 游땙
---
# Search
.task[[Task 2.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-2.0.txt)]
.left-col[
## `/` search forward
## `?` search backward
]
.right-col[
## `n` skip to <u>n</u>ext match
## `N` skip to previous match
<br>
## `:noh[ighlight]` clear highlighted matches
]
???
- Iblant er det kl칮nete 친 telle ord, s친 da kan du heller s칮ke
- / funker ogs친 p친 github, google, gcp
- Varianter av kommandoer har store bokstaver
---
# Yank, paste and delete
.task[[Task 2.1](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-2.1.txt)]
## Like it was ctrl+c, ctrl+v..
.left-col[
### `yy` <u>y</u>ank aka copy the line
### `dd` <u>d</u>elete the line
]
.right-col[
### `p` <u>p</u>aste line
### `P` <u>p</u>aste above line
]
???
/^Lorem
- Enkelte kommandoer er gjentatt - det indikerer at vim egentlig forventer noe mer
---
# Jump
.task[[Task 2.2](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-2.2.html)]
.left-col[
### `gg` <u>g</u>o to the beginning of the file
### `2gg` <u>g</u>o to line 2
### `G` <u>g</u>o to end of file
]
---
template: level
# LEVEL 3
## "Wait - how'd you do that?!" 游뱚
---
# Commands
## Are built with these building blocks 游빌
.left[
### `<operation>`
### `<number of times>` (optional)
### `<surrounding>` (optional)
### `<text object>` / `<motion>`
]
???
- N친 det blir interessant
- S친 hva betyr det?
---
class: center, inverse
# Commands
.left[
## Surroundings
### `a` <u>a</u>round - <em><b>including</b></em> quotes, whitespace etc.
### `i` <u>i</u>nside - <em><b>inside</b></em> quotes, whitespace etc.
]
--
.left-col[
## Text Objects
### `w` <u>w</u>ord
### `t` <u>t</u>ag
### `s` <u>s</u>entence
### `p` <u>p</u>aragraph
]
---
# Delete
.task[[Task 3.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-3.0.txt)]
## Some things have to go.
.left-col[
### `dw` <u>d</u>elete <u>w</u>ord
### `d2w` <u>d</u>elete two <u>w</u>ords
### `2dj` two times <u>d</u>elete down
### `dap` <u>d</u>elete <u>a</u>round <u>p</u>aragraph
### `D` <u>d</u>elete to end of line
]
---
# Change
.task[[Task 3.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-3.0.txt)]
## Some things have to change, so moving to insert mode is useful.
.left-col[
### `cw` <u>c</u>hange <u>w</u>ord
### `c2w` <u>c</u>hange two <u>w</u>ords
### `2cj` two times <u>c</u>hange down
### `cap` <u>c</u>hange <u>a</u>round <u>p</u>aragraph
### `C` <u>c</u>hange to end of line
]
???
- Med cw fjernes ordet, som med dw, men man g친r ogs친 i insert mode.
---
template: level
# LEVEL 4
## "Rampage."
---
# This works for all operations!
.task[[Task 4.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-4.0.txt)]
## Change, delete, visual, etc.
## 游뱚
.left[
### `dap` <u>d</u>elete <u>a</u>round <u>p</u>aragaph
### `d3ap` <u>d</u>elete thrice <u>a</u>round <u>p</u>aragaph
### `ci"` <u>c</u>hange <u>i</u>nside " "
### `di(` <u>d</u>elete <u>i</u>nside ( )
### `ca{` <u>c</u>hange two levels <u>a</u>round { { } }
### `v2ap` <u>v</u>isual twice <u>a</u>round <u>p</u>aragraph
]
---
template: level
# LEVEL 5
## "Dominating."
---
# Visual
.task[[Task 5.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-5.0.txt)]
## Try moving around after pressing these.
.left-col[
### `v` visual mode
### `V` linewise visual mode
### `Ctrl-v` blockwise visual mode
]
--
.right-col[
### `y` while in visual, to yank what you have selected
### `c` <u>c</u>hange to remove it and go to insert mode
### `A` <u>a</u>ppend text behind selection
### `I` <u>i</u>nsert text before selection
]
---
# Jump around
.task[[Task 5.1](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-5.1.txt)]
## To or until a character on the same line.
.left[
### `f<char>` <u>f</u>orward to char
### `F<char>` backward (opposite of <u>F</u>orward) to char
### `t<char>` move un<u>t</u>il the char
### `T<char>` move backward un<u>t</u>il the char
### Of course you can combine it with other operations, e.g. `df-`
]
???
- f, feks fra vimium i chrome/firefox
- noen flere varianter
---
# Join lines
.task[[Task 5.2](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-5.2.txt)]
## That really should be one.
.left[
### `J` pull the next line up to join it with the current one
### `3J` join the three following lines
### `va(J` join lines wrapped in () to a single line
]
---
template: level
# LEVEL 6
## "Unstoppable."
---
# Repeat previous edit
.task[[Task 6.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-6.0.txt)]
## Dude, I just did it!
.left[
### `/let` search for occurrences of "let"
### `ciwconst` <em>change inner word</em> to "const" (i.e. an edit)
### `<esc>` escape back to normal mode
### `n` go to <u>n</u>ext occurrence
### `.` repeat the previous edit
### `n` go to <u>n</u>ext occurrence
### `.` repeat the previous edit
...
]
???
- Ting du ofte ville bruke multiple cursors for
- Mer nyttig om du har glemt 칠n, og vil gjenta det
- Men dette funker p친 alle edits som er 칠n kommando, e.g. like va(J
---
template: level
# LEVEL 7
## "Godlike."
---
# Registers
.task[[Task 7.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-7.0.txt)]
## All keys can be registers.
.left[
### `:registers` browse registers
### `"<char>` the name of a register
### `"ky` yank line to register `k`
### `"kp`
]
???
- Alt du endrer eller fjerner havner i et register
---
# Keep useful commands in registers
.task[[Task 7.1](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-7.1.txt)]
## Run what's in them as a command!
.left[
### Type some useful text in a buffer, like `:w wooot`
### Select it with `V`
### Yank it to a register with, e.g. like `"ky`
### Type `:registers` or `:reg` to see it in the list of registers
### Run it with `@k`!
]
---
template: level
# LEVEL 8
## "Unstoppable, full on neckbeard mode"
<img src="neckbeard.png" style="width: 20vw;"/>
---
# Macros
.task[[Task 8.0](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-8.0.txt)]
## That's a lot of keys!! Recording them would be useful.
.left[
### `q<char>` start recording macro to register `<char>`
### ...press the keys to record...
### ...press `<esc>` to stop recording
### `@<char>` to play it back
### `@@` repeat previously played back macro
]
???
- Kan jo ikke g친 rundt 친 trykke alt dette hver gang
- Om du feks skal gj칮re en endring 100 ganger
- Da har du kanskje egentlig andre problemer
- Hvertfall, macros
- Kan ta opp en sekvens med kommandoer til en hvilken som helst tast
---
# Edit macros
.task[[Task 8.1](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-8.1.txt)]
## Even neckbeards get it wrong.
.left[
### `"qp` to paste the previous macro you saved to `q`
### Edit it like you please
### Go to the beginning of the line with `0`
### Delete it to a register, e.g. with `"wD` (this ensures you skip the trailing newline)
### Play it back with `@w`
]
---
# Advanced macros
.task[[Task 8.2](https://github.dev/torgeir/vim-workshop/blob/main/tasks/task-8.2.txt)]
## Macros work with ~everything.
.left[
### Window movement
### Opening and closing buffers
### Writing to new files
### Operations on registers
### ++
]
---
# Takk for at du deltok!
## 游뱁
## <a href="https://twitter.com/torgeir/">@torgeir</a>